#! /bin/sh -
#
# Copyright (C) Stealth Software Technologies, Inc.
#
# For the complete copyright information, please see the
# associated README file.
#
# This script uses the SST Bash library to bootstrap from /bin/sh into
# bash. See the Bash library > Bootstrapping section of the SST manual
# for more information.
#

#-----------------------------------------------------------------------
# Include the SST Bash library
#-----------------------------------------------------------------------

set -e || exit $?
if test -f sst.bash; then
  . ./sst.bash
else
  . sst.bash
fi

#-----------------------------------------------------------------------

autogen_ac_start build-aux/autogen.ac
autogen_am_start build-aux/autogen.am

#-----------------------------------------------------------------------
# Generate any implied ordering macros
#-----------------------------------------------------------------------
#
# Consider the set of all pairs (X, Y) implied by the existence of any
# GATBPS_BEFORE([$0], [Y]) call in any m4/X.m4 macro. For each unique Y
# for which m4/Y.m4 does not exist, we want to generate m4/Y.m4 and make
# it call GATBPS_REQUIRE([X]) for every corresponding X.
#

f() {

  declare    x
  declare    x_file
  declare    y
  declare    y_file
  declare -A y_to_xs
  declare    ys

  y_to_xs=()

  for x_file in m4/*.m4; do
    x=$x_file
    x=${x##*/}
    x=${x%.*}
    ys=$(
      sed -n '
        s/.*GATBPS_BEFORE(\[\$0\], \[\([^]]*\)\]).*/\1/p
      ' $x_file
    )
    for y in $ys; do
      y_to_xs[$y]+=" $x"
    done
  done

  for y in ${!y_to_xs[@]}; do
    y_file=m4/$y.m4
    if [[ ! -e $y_file ]]; then

      sst_info "Generating: $y_file"

      >$y_file

      sst_ihs <<<'
        dnl
        dnl Copyright (C) Stealth Software Technologies, Inc.
        dnl
        dnl For the complete copyright information, please see the
        dnl associated README file.
        dnl

        AC_DEFUN_ONCE(['$y'], [
        GATBPS_CALL_COMMENT([$0]m4_if(m4_eval([$# > 0]), [1], [, $@]))
        { :
      ' >>$y_file

      for x in ${y_to_xs[$y]}; do
        sst_ihs -2 <<<'
          GATBPS_REQUIRE(['$x'])
        ' >>$y_file
      done

      sst_ihs <<<'
        }])
      ' >>$y_file

    fi
  done

}; f

#-----------------------------------------------------------------------
# Generate CALL_EVERYTHING
#-----------------------------------------------------------------------
#
# It's important that this is the last m4/*.m4 macro we generate, as we
# need to analyze all other m4/*.m4 macros to generate it.
#

f() {

  declare    x
  declare    xs
  declare    y

  xs=$(sst_grep -l AC_DEFUN_ONCE m4/*.m4)
  readonly xs

  y=m4/CALL_EVERYTHING.m4
  readonly y

  sst_expect_not_exist "$y"

  >$y

  sst_ihs <<<'
    dnl
    dnl Copyright (C) Stealth Software Technologies, Inc.
    dnl
    dnl For the complete copyright information, please see the
    dnl associated README file.
    dnl

    AC_DEFUN_ONCE([CALL_EVERYTHING], [
    GATBPS_CALL_COMMENT([$0]m4_if(m4_eval([$# > 0]), [1], [, $@]))
    { :
  ' >>$y

  sst_push_var IFS

  for x in $xs; do
    x=${x##*/}
    x=${x%.*}
    sst_ihs -2 <<<'
      GATBPS_REQUIRE(['"$x"'])
    ' >>$y
  done

  sst_pop_var IFS

  sst_ihs <<<'
    }])
  ' >>$y

  sst_ac_append <<<'CALL_EVERYTHING'

}; f

#-----------------------------------------------------------------------
# Root .ag files
#-----------------------------------------------------------------------
#
# If an .ag file needs to be included and there's no more specific place
# to do it, then do it here.
#

sst_ag_include \
  doc/manual/build.phony.ag \
  doc/pages/build.phony.ag \
  doc/readme/build.phony.ag \
  src/c_cpp/build.phony.ag \
  src/c_cpp/include/pfss/switch_db_rb.h.ag \
;

#-----------------------------------------------------------------------
# Root distributed files
#-----------------------------------------------------------------------
#
# If a file needs to be distributed and there's no more specific place
# to do it, then do it here.
#

sst_am_distribute_if_not_dir \
  .clang-format \
  .gitattributes \
  COPYING.adoc \
  README.adoc \
  build-aux/adock \
  build-aux/gatbps-echo.sh \
  build-aux/gatbps-gen-date.sh \
  build-aux/gatbps-gen-date.sh.cache \
  build-aux/gatbps-gen-libtool-c.sh \
  build-aux/gatbps-gen-libtool-c.sh.cache \
  build-aux/gatbps-gen-version.sh \
  build-aux/gatbps-gen-version.sh.cache \
  build-aux/pfss.srcdir \
  doc/* \
  doc/manual/**/* \
  install/**/* \
  pfss-ios-benchmark/**/* \
  src/bash/**/* \
  src/c_cpp/misc/pfss/standard_benchmark_runner.cpp \
  src/c_cpp/misc/pfss/standard_benchmark_runner.hpp \
  src/install/**/* \
  src/java/**/* \
  src/node/**/* \
  sst.bash \
;

#-----------------------------------------------------------------------

sst_ajh_download build-aux/downloads

sst_ajh_c_cpp_test \
  src/c_cpp/test \
  src/c_cpp/libpfss.la \
;

autogen_ac_finish
autogen_am_finish

autoreconf -f -i -v -W all

echo success
